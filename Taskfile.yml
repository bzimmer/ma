# https://taskfile.dev

version: '3'

dotenv: [".clean.env"]

vars:
  DIST:
    "{{.ROOT_DIR}}/dist"

tasks:
  default:
    cmds:
      - task: build

  dist:
    desc: Create dist directory
    cmds:
      - mkdir -p {{.DIST}}

  test:
    desc: Run tests
    deps: [dist]
    cmds:
      - go test {{.CLI_ARGS}} -race -count=1 -covermode atomic -coverprofile {{.DIST}}/coverage.txt ./...

  test-integration:
    desc: Run integration tests
    deps: [build]
    cmds:
      - go test {{.CLI_ARGS}} --tags=integration -race -count=1 -covermode atomic ./...

  cover:
    desc: Visualize test coverage
    deps: [test]
    cmds:
      - go tool cover -html={{.DIST}}/coverage.txt

  clean:
    desc: Remove build artifacts
    cmds:
      - rm -rf {{.DIST}}

  build:
    desc: Build all cmds
    deps: [dist]
    vars:
      binaries:
        sh: fd -t d --max-depth 1 . {{.ROOT_DIR}}/cmd -x echo {/}
    cmds:
      - |

        {{ range ( .binaries | trim | splitLines ) -}}
        go build -o {{$.DIST}}/{{.}} cmd/{{.}}/*.go
        {{ end -}}

  lint:
    desc: Runs golint
    cmds:
      - golangci-lint -v run
      - typos

  snapshot:
    desc: Build a snapshot
    deps: [test, lint]
    cmds:
      - goreleaser --debug release --snapshot --clean

  docs:build:
    desc: Statically generate the documentation
    deps: [dist]
    cmds:
      - "{{.ROOT_DIR}}/env/bin/mkdocs build"

  docs:serve:
    desc: Serve the documentation
    deps: [docs:generate]
    cmds:
      - "{{.ROOT_DIR}}/env/bin/mkdocs serve"

  goimports:
    desc: Run goimports
    vars:
      ModulePath:
        sh: go mod edit -json | jq -r .Module.Path
    cmds:
      - goimports -w -local "{{.ModulePath}}" .
